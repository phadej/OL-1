=== INPUT ===================================================================
; We can LJT proof search for values

; value
(search ex (tuple (tuple) (tuple)))

; functions
(search id (-> @A A A))
(search flip (-> @A @B @C (-> A B C) (-> B A C)))
(search compose (-> @A @B @C (-> B C) (-> A B) (-> A C)))

; identity with different type
(search idPair (-> @A @B (tuple A B) (tuple A B)))

; pair functions
(search pair (-> @A @B (-> A B (tuple A B))))
(search swap (-> @A @B (tuple A B) (tuple B A)))
(search fst (-> @A @B (tuple A B) A))
(search snd (-> @A @B (tuple A B) A))

; curry
(search curry (-> @A @B @C (-> (tuple A B) C) A B C))
(search uncurry (-> @A @B @C (-> A B C) (tuple A B) C))
curry

; bigger curry
(search curry3 (-> @A @B @C @D (-> (tuple A B C) D) A B C D))

; weird, to test last rule in LJT
(search weird (-> @A @B (-> (-> A A) B) B))
weird

; search finds /almost/ the right type to make correct grate
; Grate is fancy kind of optic.
(search invalidGrateV2 (-> @A @B (-> (-> (tuple A A) A) B) (tuple B B)))

; this is correct grateV2
; it can be used to build and map over V2 (= homegenous pair)
(define grateV2 (the
  (-> @A @B (-> (-> (tuple A A) A) B) (tuple B B))
  (fn (@A @B aab) (tuple (aab fst) (aab snd)))))

(define mapV2
  (fn (f p) (grateV2 (fn (i) (f (i p))))))

(define pureV2
  (fn (x) (grateV2 (fn (i) x))))

=== PARSED 1 ================================================================
(search ex (tuple (tuple) (tuple)))

=== SEARCH ==================================================================
ex = ? : (tuple (tuple) (tuple))

=== FOUND ===================================================================
(tuple (tuple) (tuple))

=== PARSED 2 ================================================================
(search id (-> @A A A))

=== SEARCH ==================================================================
id = ? : (-> @A A A)

=== FOUND ===================================================================
(fn (@A a) a)

=== PARSED 3 ================================================================
(search flip (-> @A @B @C (-> A B C) (-> B A C)))

=== SEARCH ==================================================================
flip = ? : (-> @A @B @C (-> A B C) B A C)

=== FOUND ===================================================================
(fn (@A @B @C abc b a) (abc a b))

=== PARSED 4 ================================================================
(search compose (-> @A @B @C (-> B C) (-> A B) (-> A C)))

=== SEARCH ==================================================================
compose = ? : (-> @A @B @C (-> B C) (-> A B) A C)

=== FOUND ===================================================================
(fn (@A @B @C bc ab a) (bc (ab a)))

=== PARSED 5 ================================================================
(search idPair (-> @A @B (tuple A B) (tuple A B)))

=== SEARCH ==================================================================
idPair = ? : (-> @A @B (tuple A B) (tuple A B))

=== FOUND ===================================================================
(fn (@A @B ab) ab)

=== PARSED 6 ================================================================
(search pair (-> @A @B (-> A B (tuple A B))))

=== SEARCH ==================================================================
pair = ? : (-> @A @B A B (tuple A B))

=== FOUND ===================================================================
(fn (@A @B a b) (tuple a b))

=== PARSED 7 ================================================================
(search swap (-> @A @B (tuple A B) (tuple B A)))

=== SEARCH ==================================================================
swap = ? : (-> @A @B (tuple A B) (tuple B A))

=== FOUND ===================================================================
(fn (@A @B ab) (split ab (a b) (tuple b a)))

=== PARSED 8 ================================================================
(search fst (-> @A @B (tuple A B) A))

=== SEARCH ==================================================================
fst = ? : (-> @A @B (tuple A B) A)

=== FOUND ===================================================================
(fn (@A @B ab) (split ab (a b) a))

=== PARSED 9 ================================================================
(search snd (-> @A @B (tuple A B) A))

=== SEARCH ==================================================================
snd = ? : (-> @A @B (tuple A B) A)

=== FOUND ===================================================================
(fn (@A @B ab) (split ab (a b) a))

=== PARSED 10 ===============================================================
(search curry (-> @A @B @C (-> (tuple A B) C) A B C))

=== SEARCH ==================================================================
curry = ? : (-> @A @B @C (-> (tuple A B) C) A B C)

=== FOUND ===================================================================
(fn (@A @B @C abc a b) (abc (tuple a b)))

=== PARSED 11 ===============================================================
(search uncurry (-> @A @B @C (-> A B C) (tuple A B) C))

=== SEARCH ==================================================================
uncurry = ? : (-> @A @B @C (-> A B C) (tuple A B) C)

=== FOUND ===================================================================
(fn (@A @B @C abc ab) (split ab (a b) (abc a b)))

=== PARSED 12 ===============================================================
curry

=== EVALUATE ================================================================
curry

=== INFERRED ================================================================
curry

=== CHECKED TYPE ============================================================
(-> @A @B @C (-> (tuple A B) C) A B C)

=== EXPANDED ================================================================
(the (-> @A @B @C (-> (tuple A B) C) A B C)
     (fn (@A @B @C abc a b) (abc (tuple a b))))

=== EVALUATED VALUE =========================================================
(fn (@A @B @C (the (-> (tuple A B) C) abc) (the A a) (the B b))
    (abc (tuple a b)))

=== PARSED 13 ===============================================================
(search curry3 (-> @A @B @C @D (-> (tuple A B C) D) A B C D))

=== SEARCH ==================================================================
curry3 = ? : (-> @A @B @C @D (-> (tuple A B C) D) A B C D)

=== FOUND ===================================================================
(fn (@A @B @C @D abcd a b c) (abcd (tuple a b c)))

=== PARSED 14 ===============================================================
(search weird (-> @A @B (-> (-> A A) B) B))

=== SEARCH ==================================================================
weird = ? : (-> @A @B (-> (-> A A) B) B)

=== FOUND ===================================================================
(fn (@A @B aab) (aab (fn (a) a)))

=== PARSED 15 ===============================================================
weird

=== EVALUATE ================================================================
weird

=== INFERRED ================================================================
weird

=== CHECKED TYPE ============================================================
(-> @A @B (-> (-> A A) B) B)

=== EXPANDED ================================================================
(the (-> @A @B (-> (-> A A) B) B) (fn (@A @B aab) (aab (fn (a) a))))

=== EVALUATED VALUE =========================================================
(fn (@A @B (the (-> (-> A A) B) aab)) (aab (fn ((the A a)) a)))

=== PARSED 16 ===============================================================
(search invalidGrateV2 (-> @A @B (-> (-> (tuple A A) A) B) (tuple B B)))

=== SEARCH ==================================================================
invalidGrateV2 = ? : (-> @A @B (-> (-> (tuple A A) A) B) (tuple B B))

=== FOUND ===================================================================
(fn (@A @B aaab) (tuple (aaab (fn (aa) (split aa (a a1) a)))
                        (aaab (fn (aa) (split aa (a a1) a)))))

=== PARSED 17 ===============================================================
(define grateV2 (the (-> @A @B (-> (-> (tuple A A) A) B) (tuple B B))
                     (fn (@A @B aab) (tuple (aab fst) (aab snd)))))

=== DEFINE ==================================================================
(the (-> @A @B (-> (-> (tuple A A) A) B) (tuple B B))
     (fn (@A @B aab) (tuple (aab fst) (aab snd))))

=== INFERRED ================================================================
(the (-> @A @B (-> (-> (tuple A A) A) B) (tuple B B))
     (fn (@A @B aab) (tuple (aab (fst @A @A)) (aab (snd @A @A)))))

=== CHECKED TYPE ============================================================
(-> @A @B (-> (-> (tuple A A) A) B) (tuple B B))

=== PARSED 18 ===============================================================
(define mapV2 (fn (f p) (grateV2 (fn (i) (f (i p))))))

=== DEFINE ==================================================================
(fn (f p) (grateV2 (fn (i) (f (i p)))))

=== INFERRED ================================================================
(the (-> @t @t1 (-> t t1) (tuple t t) (tuple t1 t1))
     (fn (@t @t1 f p) (grateV2 @t @t1 (fn (i) (f (i p))))))

=== CHECKED TYPE ============================================================
(-> @t @t1 (-> t t1) (tuple t t) (tuple t1 t1))

=== PARSED 19 ===============================================================
(define pureV2 (fn (x) (grateV2 (fn (i) x))))

=== DEFINE ==================================================================
(fn (x) (grateV2 (fn (i) x)))

=== INFERRED ================================================================
(the (-> @t @t1 t (tuple t t)) (fn (@t @t1 x) (grateV2 @t1 @t (fn (i) x))))

=== CHECKED TYPE ============================================================
(-> @t @t1 t (tuple t t))

